{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Dev Blogs Various topics gathered from around the internet can be found here.","title":"Home"},{"location":"#welcome-to-dev-blogs","text":"Various topics gathered from around the internet can be found here.","title":"Welcome to Dev Blogs"},{"location":"kubernetes/Readme/","text":"Day 1 - 23rd Dec 2019 High level agenda Go through Mumshad all k8s notes Create K8s cluster using kthw and kubeadm a. Create K8s cluster using kubeadm in LA. As exam will be based on Ubuntu 16 machines so will be spawning 4 nodes using kubeadm Setup in mind - a. Initially go with 1 master node and 3 worker nodes, with each node having different labels to test various conditions. Going via the documentation - main k8s docs are divided into Getting started -- CNI used Weave - use all Contains release notes Getting started with minikube - simple k8s commands w.r.t minikube Details about production runtime - installing cri includes docker, cri-o, containerd Refer for steps if need to install docker Installing k8s with tools including kubeadm, kops, krib, kubespray. a. Main focus is on kubeadm as it will be covered in the exam 1. information about the ports for different k8s components is present here, and installing kubeadm itself 2. kubeadm cluster init, token and join with worker nodes 1. netstat -nlpt|grep :10250 --> to check if a port is currently in use 3. creating HA kubeadm cluster 1. Topology Same ETCD same API server , use upload certs and then use the command to join with other nodes, use private ip of first etcd or use dns of loadbalancer kubeadm init --control-plane-endpoint \"172.31.105.97:6443\" --upload-certs 2. Separte ETCD servers refer to file and configure separte etcd urls kubeadm config print init-default use command kubeadm init --config kubeadm-config.yaml --upload-certs then to create the cluster and install CNI b. Turnkey solutions , on premise and windows Best Practices - Read them Important information about the certificates that needs to be generated for different k8s component is mentioned, refer to this page when doing KTHW Concepts Tasks Tutorials Reference","title":"Readme"},{"location":"kubernetes/questions/","text":"Put questions here which will be looked into later check number of cpu, memory in a linux system to check if they fulfil the requirements. Ip tables what are linux sockets Check what is the CRI in test cluster --> IMPORTANT Refer https://docs.docker.com/config/daemon/systemd/ -- Starting docker with systemd SSL cert - openssl x509 -text -noout for kubeadm to use external ca - https://gist.github.com/detiber/81b515df272f5911959e81e39137a8bb Links to go to https://gist.github.com/texasdave2/8f4ce19a467180b6e3a02d7be0c765e7 https://github.com/David-VTUK/CKA-StudyGuide/tree/master/LabGuide https://github.com/walidshaari/Kubernetes-Certified-Administrator https://www.objectif-libre.com/en/blog/2018/07/05/k8s-network-solutions-comparison/ Generate CA client certificate for API server to communicate with ETCD openssl x509 -req -in /etc/kubernetes/pki/apiserver-etcd-client.csr \\ -CA /etc/kubernetes/pki/etcd/ca.crt \\ -CAkey /etc/kubernetes/pki/etcd/ca.key \\ -CAcreateserial \\ -out /etc/kubernetes/pki/apiserver-etcd-client.crt Have to create CSR in that case, do check if there is a CSR present.","title":"Questions"},{"location":"prometheus/Introduction/","text":"","title":"Introduction"},{"location":"ubuntu/installing-docker-ubuntu-20.04/","text":"Docker is an application that simplifies the process of managing application processes in containers. In this tutorial, you'll install and use Docker Community Edition (CE) on Ubuntu 20.04. You'll install Docker itself, work with containers and images How To Install and Use Docker on Ubuntu 20.04 | DigitalOcean Introduction Docker is an application that simplifies the process of managing application processes in containers . Containers let you run your applications in resource-isolated processes. They\u2019re similar to virtual machines, but containers are more portable, more resource-friendly, and more dependent on the host operating system. For a detailed introduction to the different components of a Docker container, check out The Docker Ecosystem: An Introduction to Common Components . In this tutorial, you\u2019ll install and use Docker Community Edition (CE) on Ubuntu 20.04. You\u2019ll install Docker itself, work with containers and images, and push an image to a Docker Repository. Prerequisites To follow this tutorial, you will need the following: One Ubuntu 20.04 server set up by following the Ubuntu 20.04 initial server setup guide , including a sudo non-root user and a firewall. An account on Docker Hub if you wish to create your own images and push them to Docker Hub, as shown in Steps 7 and 8. Step 1 \u2014 Installing Docker The Docker installation package available in the official Ubuntu repository may not be the latest version. To ensure we get the latest version, we\u2019ll install Docker from the official Docker repository. To do that, we\u2019ll add a new package source, add the GPG key from Docker to ensure the downloads are valid, and then install the package. First, update your existing list of packages: sudo apt update Next, install a few prerequisite packages which let apt use packages over HTTPS: sudo apt install apt-transport-https ca-certificates curl software-properties-common Then add the GPG key for the official Docker repository to your system: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Add the Docker repository to APT sources: sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable\" Next, update the package database with the Docker packages from the newly added repo: sudo apt update Make sure you are about to install from the Docker repo instead of the default Ubuntu repo: apt-cache policy docker-ce You\u2019ll see output like this, although the version number for Docker may be different: Output of apt-cache policy docker-ce docker-ce: Installed: (none) Candidate: 5:19.03.9~3-0~ubuntu-focal Version table: 5:19.03.9~3-0~ubuntu-focal 500 500 https://download.docker.com/linux/ubuntu focal/stable amd64 Packages Notice that docker-ce is not installed, but the candidate for installation is from the Docker repository for Ubuntu 20.04 ( focal ). Finally, install Docker: sudo apt install docker-ce Docker should now be installed, the daemon started, and the process enabled to start on boot. Check that it\u2019s running: sudo systemctl status docker The output should be similar to the following, showing that the service is active and running: Output\u25cf docker.service - Docker Application Container Engine Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled) Active: active (running) since Tue 2020-05-19 17:00:41 UTC; 17s ago TriggeredBy: \u25cf docker.socket Docs: https://docs.docker.com Main PID: 24321 (dockerd) Tasks: 8 Memory: 46.4M CGroup: /system.slice/docker.service \u2514\u250024321 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock Installing Docker now gives you not just the Docker service (daemon) but also the docker command line utility, or the Docker client. We\u2019ll explore how to use the docker command later in this tutorial. Step 2 \u2014 Executing the Docker Command Without Sudo (Optional) By default, the docker command can only be run the root user or by a user in the docker group, which is automatically created during Docker\u2019s installation process. If you attempt to run the docker command without prefixing it with sudo or without being in the docker group, you\u2019ll get an output like this: Outputdocker: Cannot connect to the Docker daemon. Is the docker daemon running on this host?. See 'docker run --help'. If you want to avoid typing sudo whenever you run the docker command, add your username to the docker group: sudo usermod -aG docker ${USER} To apply the new group membership, log out of the server and back in, or type the following: su - ${USER} You will be prompted to enter your user\u2019s password to continue. Confirm that your user is now added to the docker group by typing: id -nG Outputsammy sudo docker If you need to add a user to the docker group that you\u2019re not logged in as, declare that username explicitly using: sudo usermod -aG docker username The rest of this article assumes you are running the docker command as a user in the docker group. If you choose not to, please prepend the commands with sudo . Let\u2019s explore the docker command next. Step 3 \u2014 Using the Docker Command Using docker consists of passing it a chain of options and commands followed by arguments. The syntax takes this form: docker [option] [command] [arguments] To view all available subcommands, type: docker As of Docker 19, the complete list of available subcommands includes: Output attach Attach local standard input, output, and error streams to a running container build Build an image from a Dockerfile commit Create a new image from a container's changes cp Copy files/folders between a container and the local filesystem create Create a new container diff Inspect changes to files or directories on a container's filesystem events Get real time events from the server exec Run a command in a running container export Export a container's filesystem as a tar archive history Show the history of an image images List images import Import the contents from a tarball to create a filesystem image info Display system-wide information inspect Return low-level information on Docker objects kill Kill one or more running containers load Load an image from a tar archive or STDIN login Log in to a Docker registry logout Log out from a Docker registry logs Fetch the logs of a container pause Pause all processes within one or more containers port List port mappings or a specific mapping for the container ps List containers pull Pull an image or a repository from a registry push Push an image or a repository to a registry rename Rename a container restart Restart one or more containers rm Remove one or more containers rmi Remove one or more images run Run a command in a new container save Save one or more images to a tar archive (streamed to STDOUT by default) search Search the Docker Hub for images start Start one or more stopped containers stats Display a live stream of container(s) resource usage statistics stop Stop one or more running containers tag Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE top Display the running processes of a container unpause Unpause all processes within one or more containers update Update configuration of one or more containers version Show the Docker version information wait Block until one or more containers stop, then print their exit codes To view the options available to a specific command, type: docker docker-subcommand --help To view system-wide information about Docker, use: docker info","title":"Installing docker ubuntu 20.04"},{"location":"ubuntu/installing-docker-ubuntu-20.04/#how-to-install-and-use-docker-on-ubuntu-2004-digitalocean","text":"","title":"How To Install and Use Docker on Ubuntu 20.04 | DigitalOcean"},{"location":"ubuntu/installing-docker-ubuntu-20.04/#introduction","text":"Docker is an application that simplifies the process of managing application processes in containers . Containers let you run your applications in resource-isolated processes. They\u2019re similar to virtual machines, but containers are more portable, more resource-friendly, and more dependent on the host operating system. For a detailed introduction to the different components of a Docker container, check out The Docker Ecosystem: An Introduction to Common Components . In this tutorial, you\u2019ll install and use Docker Community Edition (CE) on Ubuntu 20.04. You\u2019ll install Docker itself, work with containers and images, and push an image to a Docker Repository.","title":"Introduction"},{"location":"ubuntu/installing-docker-ubuntu-20.04/#prerequisites","text":"To follow this tutorial, you will need the following: One Ubuntu 20.04 server set up by following the Ubuntu 20.04 initial server setup guide , including a sudo non-root user and a firewall. An account on Docker Hub if you wish to create your own images and push them to Docker Hub, as shown in Steps 7 and 8.","title":"Prerequisites"},{"location":"ubuntu/installing-docker-ubuntu-20.04/#step-1-installing-docker","text":"The Docker installation package available in the official Ubuntu repository may not be the latest version. To ensure we get the latest version, we\u2019ll install Docker from the official Docker repository. To do that, we\u2019ll add a new package source, add the GPG key from Docker to ensure the downloads are valid, and then install the package. First, update your existing list of packages: sudo apt update Next, install a few prerequisite packages which let apt use packages over HTTPS: sudo apt install apt-transport-https ca-certificates curl software-properties-common Then add the GPG key for the official Docker repository to your system: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Add the Docker repository to APT sources: sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable\" Next, update the package database with the Docker packages from the newly added repo: sudo apt update Make sure you are about to install from the Docker repo instead of the default Ubuntu repo: apt-cache policy docker-ce You\u2019ll see output like this, although the version number for Docker may be different: Output of apt-cache policy docker-ce docker-ce: Installed: (none) Candidate: 5:19.03.9~3-0~ubuntu-focal Version table: 5:19.03.9~3-0~ubuntu-focal 500 500 https://download.docker.com/linux/ubuntu focal/stable amd64 Packages Notice that docker-ce is not installed, but the candidate for installation is from the Docker repository for Ubuntu 20.04 ( focal ). Finally, install Docker: sudo apt install docker-ce Docker should now be installed, the daemon started, and the process enabled to start on boot. Check that it\u2019s running: sudo systemctl status docker The output should be similar to the following, showing that the service is active and running: Output\u25cf docker.service - Docker Application Container Engine Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled) Active: active (running) since Tue 2020-05-19 17:00:41 UTC; 17s ago TriggeredBy: \u25cf docker.socket Docs: https://docs.docker.com Main PID: 24321 (dockerd) Tasks: 8 Memory: 46.4M CGroup: /system.slice/docker.service \u2514\u250024321 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock Installing Docker now gives you not just the Docker service (daemon) but also the docker command line utility, or the Docker client. We\u2019ll explore how to use the docker command later in this tutorial.","title":"Step 1 \u2014 Installing Docker"},{"location":"ubuntu/installing-docker-ubuntu-20.04/#step-2-executing-the-docker-command-without-sudo-optional","text":"By default, the docker command can only be run the root user or by a user in the docker group, which is automatically created during Docker\u2019s installation process. If you attempt to run the docker command without prefixing it with sudo or without being in the docker group, you\u2019ll get an output like this: Outputdocker: Cannot connect to the Docker daemon. Is the docker daemon running on this host?. See 'docker run --help'. If you want to avoid typing sudo whenever you run the docker command, add your username to the docker group: sudo usermod -aG docker ${USER} To apply the new group membership, log out of the server and back in, or type the following: su - ${USER} You will be prompted to enter your user\u2019s password to continue. Confirm that your user is now added to the docker group by typing: id -nG Outputsammy sudo docker If you need to add a user to the docker group that you\u2019re not logged in as, declare that username explicitly using: sudo usermod -aG docker username The rest of this article assumes you are running the docker command as a user in the docker group. If you choose not to, please prepend the commands with sudo . Let\u2019s explore the docker command next.","title":"Step 2 \u2014 Executing the Docker Command Without Sudo (Optional)"},{"location":"ubuntu/installing-docker-ubuntu-20.04/#step-3-using-the-docker-command","text":"Using docker consists of passing it a chain of options and commands followed by arguments. The syntax takes this form: docker [option] [command] [arguments] To view all available subcommands, type: docker As of Docker 19, the complete list of available subcommands includes: Output attach Attach local standard input, output, and error streams to a running container build Build an image from a Dockerfile commit Create a new image from a container's changes cp Copy files/folders between a container and the local filesystem create Create a new container diff Inspect changes to files or directories on a container's filesystem events Get real time events from the server exec Run a command in a running container export Export a container's filesystem as a tar archive history Show the history of an image images List images import Import the contents from a tarball to create a filesystem image info Display system-wide information inspect Return low-level information on Docker objects kill Kill one or more running containers load Load an image from a tar archive or STDIN login Log in to a Docker registry logout Log out from a Docker registry logs Fetch the logs of a container pause Pause all processes within one or more containers port List port mappings or a specific mapping for the container ps List containers pull Pull an image or a repository from a registry push Push an image or a repository to a registry rename Rename a container restart Restart one or more containers rm Remove one or more containers rmi Remove one or more images run Run a command in a new container save Save one or more images to a tar archive (streamed to STDOUT by default) search Search the Docker Hub for images start Start one or more stopped containers stats Display a live stream of container(s) resource usage statistics stop Stop one or more running containers tag Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE top Display the running processes of a container unpause Unpause all processes within one or more containers update Update configuration of one or more containers version Show the Docker version information wait Block until one or more containers stop, then print their exit codes To view the options available to a specific command, type: docker docker-subcommand --help To view system-wide information about Docker, use: docker info","title":"Step 3 \u2014 Using the Docker Command"},{"location":"unix/Accessing-Remote-Machines-Using-SSH/","text":"Accessing Remote Machines Using SSH SSH Keys One of the main advantages to using SSH are SSH keys. They are a cryptographic public/private key pair used for authentication. They always come in twos. The private key is stored on the client. The public key is stored on the remote machine. When a user makes an attempt to connect to a remote machine via SSH, the protocol will check the user\u2019s computer for the private key that matches the public key stored on the remote machine. If there is a match, the connection is successful. No password needed! You can even add a passphrase for added security. How to setup SSH keys Step 1: Generate SSH Keys ssh-keygen -t rsa Step 2: Name your SSH keys After entering the command, you should get this output: Generating public/private rsa key pair. Enter file in which to save the key(/Users/<local_user>/.ssh/id_rsa) <local_user> refers to your local computer's current user. The terminal instructs us to enter the name of a file in which we want our private key to be saved. You have 2 options: a. Choose the default filename id_rsa b. Provide your own unique filename Two important things to note here: If you plan on having multiple SSH keys, it\u2019s best to name each one uniquely. If you decide to provide a unique filename, you must type in the complete file path along with the filename. Recommend to add a unique word after id_rsa that describes which remote machine the key will be used to connect to. Step 3: Enter a passphrase (optional) For added security over ssh. Step 4: Move the public key to the remote machine The public key has to be placed on whatever remote machine you plan on accessing via SSH. In your terminal, enter: ssh-copy-id -i ~/.ssh/<public_key_file> <user>@<remote machine> ssh-copy-id moves the public key file specified with -i ~/.ssh/ Step 5: Test your connection Go ahead and attempt to login to the remote machine using: ssh <user>@<remote machine>","title":"ssh-access"},{"location":"unix/Accessing-Remote-Machines-Using-SSH/#accessing-remote-machines-using-ssh","text":"","title":"Accessing Remote Machines Using SSH"},{"location":"unix/Accessing-Remote-Machines-Using-SSH/#ssh-keys","text":"One of the main advantages to using SSH are SSH keys. They are a cryptographic public/private key pair used for authentication. They always come in twos. The private key is stored on the client. The public key is stored on the remote machine. When a user makes an attempt to connect to a remote machine via SSH, the protocol will check the user\u2019s computer for the private key that matches the public key stored on the remote machine. If there is a match, the connection is successful. No password needed! You can even add a passphrase for added security.","title":"SSH Keys"},{"location":"unix/Accessing-Remote-Machines-Using-SSH/#how-to-setup-ssh-keys","text":"Step 1: Generate SSH Keys ssh-keygen -t rsa Step 2: Name your SSH keys After entering the command, you should get this output: Generating public/private rsa key pair. Enter file in which to save the key(/Users/<local_user>/.ssh/id_rsa) <local_user> refers to your local computer's current user. The terminal instructs us to enter the name of a file in which we want our private key to be saved. You have 2 options: a. Choose the default filename id_rsa b. Provide your own unique filename Two important things to note here: If you plan on having multiple SSH keys, it\u2019s best to name each one uniquely. If you decide to provide a unique filename, you must type in the complete file path along with the filename. Recommend to add a unique word after id_rsa that describes which remote machine the key will be used to connect to. Step 3: Enter a passphrase (optional) For added security over ssh. Step 4: Move the public key to the remote machine The public key has to be placed on whatever remote machine you plan on accessing via SSH. In your terminal, enter: ssh-copy-id -i ~/.ssh/<public_key_file> <user>@<remote machine> ssh-copy-id moves the public key file specified with -i ~/.ssh/ Step 5: Test your connection Go ahead and attempt to login to the remote machine using: ssh <user>@<remote machine>","title":"How to setup SSH keys"}]}